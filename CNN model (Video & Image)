#cnn .ipynb

# import packages
import cv2
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np

#load model # Accuracy=95 , validation Accuracy = 98.5 # small model, size =4.8MB
model_cnn = load_model('C:/Users/jithu/Downloads/mask detection/model/model_acc_958_vacc_986_epoch_50.h5') #cnn model

# model accept below hight and width of the image
img_width, img_hight = 200, 200

# evaluation on videos (upload and webcam)

# Load the Cascade face Classifier
face_cascade = cv2.CascadeClassifier('C:/Users/jithu/Downloads/mask detection/live mask detection app/haarcascade_frontalface_default.xml')

#startt  web cam
#cap = cv2.VideoCapture(0) # for webcam
cap = cv2.VideoCapture('C:/Users/jithu/Downloads/mask detection/live mask detection app/videos/Mask - 34775.mp4') # for video

img_count_full = 0

#parameters for text
# font 
font = cv2.FONT_HERSHEY_SIMPLEX 
# org 
org = (1, 1)
class_lable=' '      
# fontScale 
fontScale = 1 #0.5
# Blue color in BGR 
color = (255, 0, 0) 
# Line thickness of 2 px 
thickness = 2 #1


#start reading images and prediction
while True:
    img_count_full += 1
    
    #read image from webcam
    responce, color_img = cap.read()
    #color_img = cv2.imread('sandeep.jpg')
    
    #if respoce False the break the loop
    if responce == False:
        break    
      
    # Convert to grayscale
    gray_img = cv2.cvtColor(color_img, cv2.COLOR_BGR2GRAY)
    
    # Detect the faces
    faces = face_cascade.detectMultiScale(gray_img, 1.1, 6) # 1.1, 3) for 1.mp4
    
    #take face then predict class mask or not mask then draw recrangle and text then display image
    img_count = 0
    for (x, y, w, h) in faces:
        org = (x-10,y-10)
        img_count +=1 
        color_face = color_img[y:y+h,x:x+w] # color face
        cv2.imwrite('faces/input/%d%dface.jpg'%(img_count_full,img_count),color_face)
        img = load_img('faces/input/%d%dface.jpg'%(img_count_full,img_count), target_size=(img_width,img_hight))
        
        img = img_to_array(img)/255
        img = np.expand_dims(img,axis=0)
        pred_prob = model_cnn.predict(img)
        #print(pred_prob[0][0].round(2))
        pred=np.argmax(pred_prob)
            
        if pred==0:
            print("User with mask - prediction = ", pred_prob[0][0])
            class_lable = "Mask"
            color = (0, 255, 0)  # Green color for "Mask"
            cv2.imwrite('faces/with_mask/%d%dface.jpg'%(img_count_full,img_count),color_face)
                 
        else:
            print('user not wearing mask - prob = ',pred_prob[0][1])
            class_lable = "No Mask"
            color = (0, 0, 255)  # Red color for "No Mask"
            cv2.imwrite('faces/without_mask/%d%dface.jpg'%(img_count_full,img_count),color_face)
                
        cv2.rectangle(color_img, (x, y), (x+w, y+h), color, 3)
        # Using cv2.putText() method 
        cv2.putText(color_img, class_lable, org, font,  
                                   fontScale, color, thickness, cv2.LINE_AA) 
    
    # display image
    cv2.imshow('LIVE face mask detection', color_img)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the VideoCapture object
cap.release()
cv2.destroyAllWindows()

#Code for Saving the output video

import cv2
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np

# Load the Cascade face Classifier
face_cascade = cv2.CascadeClassifier('C:/Users/jithu/Downloads/mask detection/live mask detection app/haarcascade_frontalface_default.xml')

# Start the video capture
#cap = cv2.VideoCapture(0)  # for webcam
cap = cv2.VideoCapture('C:/Users/jithu/Downloads/mask detection/live mask detection app/videos/Mask - 34775.mp4')  # for video

# Get the frame width and height
frame_width = int(cap.get(3))
frame_height = int(cap.get(4))

# Define the codec and create VideoWriter object
out = cv2.VideoWriter('output.mp4', cv2.VideoWriter_fourcc(*'mp4v'), 30, (frame_width, frame_height))

# Load the pre-trained CNN model
model_cnn = load_model('C:/Users/jithu/Downloads/mask detection/model/model_acc_958_vacc_986_epoch_50.h5')  # cnn

# Parameters for text and drawing
font = cv2.FONT_HERSHEY_SIMPLEX
org = (1, 1)
class_label = ''
fontScale = 1
color = (255, 0, 0)
thickness = 2

# Start reading images and prediction
while True:
    ret, color_img = cap.read()

    # If response is False, break the loop
    if not ret:
        break

    gray_img = cv2.cvtColor(color_img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray_img, 1.1, 6)

    for (x, y, w, h) in faces:
        org = (x - 10, y - 10)
        color_face = color_img[y:y + h, x:x + w]
        cv2.imwrite('faces/input/%d%dface.jpg' % (img_count_full, img_count), color_face)
        img = load_img('faces/input/%d%dface.jpg' % (img_count_full, img_count), target_size=(200, 200))

        img = img_to_array(img) / 255
        img = np.expand_dims(img, axis=0)
        pred_prob = model_cnn.predict(img)
        pred = np.argmax(pred_prob)

        if pred == 0:
            print("User with mask - prediction = ", pred_prob[0][0])
            class_label = "Mask"
            color = (0, 255, 0)  # Green color for "Mask"
            cv2.imwrite('faces/with_mask/%d%dface.jpg' % (img_count_full, img_count), color_face)

        else:
            print('User not wearing mask - prob = ', pred_prob[0][1])
            class_label = "No Mask"
            color = (0, 0, 255)  # Red color for "No Mask"
            cv2.imwrite('faces/without_mask/%d%dface.jpg' % (img_count_full, img_count), color_face)

        cv2.rectangle(color_img, (x, y), (x + w, y + h), color, 3)
        cv2.putText(color_img, class_label, org, font, fontScale, color, thickness, cv2.LINE_AA)

    # Write the frame to the output video
    out.write(color_img)

    # Display the output frame
    cv2.imshow('LIVE face mask detection', color_img)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the VideoCapture and VideoWriter objects
cap.release()
out.release()

# Destroy all OpenCV windows
cv2.destroyAllWindows()

#Code for evaluating on images

import cv2
import os
from keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np

# Load the  model
model = load_model('C:/Users/jithu/Downloads/mask detection/model/model_acc_958_vacc_986_epoch_50.h5')

# Model accept below height and width of the image
img_width, img_height = 200, 200

# Load the Cascade face Classifier
face_cascade = cv2.CascadeClassifier('C:/Users/jithu/Downloads/mask detection/live mask detection app/haarcascade_frontalface_default.xml')

# Parameters for text
font = cv2.FONT_HERSHEY_SIMPLEX
org = (1, 1)
class_label = ' '
fontScale = 1
thickness = 2

# Read image from the specified path
input_image_path = 'C:/Users/jithu/Downloads/mask detection/live mask detection app/images/mask-5136259_1280.jpg'
color_img = cv2.imread(input_image_path)

# Convert to grayscale
gray_img = cv2.cvtColor(color_img, cv2.COLOR_BGR2GRAY)

# Detect the faces
faces = face_cascade.detectMultiScale(gray_img, 1.1, 6)

# Take each face, predict mask or not mask, then draw rectangle and text, and display the image
img_count = 0
for (x, y, w, h) in faces:
    org = (x - 10, y - 10)
    img_count += 1
    color_face = color_img[y:y + h, x:x + w]  # color face

    # Save the face image with an absolute file path
    face_image_path = os.path.join('C:/Users/jithu/Downloads/mask detection/live mask detection app/faces/input', f'{img_count}face.jpg')
    cv2.imwrite(face_image_path, color_face)

    # Load the saved face image using Keras
    img = load_img(face_image_path, target_size=(img_width, img_height))
    img = img_to_array(img) / 255
    img = np.expand_dims(img, axis=0)

    # Make the prediction using the model
    pred_prob = model.predict(img)
    pred = np.argmax(pred_prob)

    if pred == 0:
        print("User with mask - prediction = ", pred_prob[0][0])
        class_label = "Mask"
        color = (0, 255, 0)  # Green color for "With Mask"
        cv2.imwrite('faces/with_mask/%dface.jpg' % (img_count), color_face)
    else:
        print('User not wearing mask - probability = ', pred_prob[0][1])
        class_label = "No Mask"
        color = (0, 0, 255)  # Red color for "Without Mask"
        cv2.imwrite('faces/without_mask/%dface.jpg' % (img_count), color_face)

    # Draw rectangle and put text
    cv2.rectangle(color_img, (x, y), (x + w, y + h), color, 3)
    cv2.putText(color_img, class_label, org, font, fontScale, color, thickness, cv2.LINE_AA)

# Display the image
cv2.imshow('LIVE face mask detection', color_img)
cv2.waitKey()

# Close all windows
cv2.destroyAllWindows()



